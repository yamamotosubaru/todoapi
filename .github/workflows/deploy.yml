name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin 216989110067.dkr.ecr.ap-northeast-1.amazonaws.com

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: 216989110067.dkr.ecr.ap-northeast-1.amazonaws.com
          IMAGE_NAME: todo-demo
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG

      - name: Deploy to EC2 via Session Manager
        env:
          EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          ECR_REGISTRY: 216989110067.dkr.ecr.ap-northeast-1.amazonaws.com
          IMAGE_NAME: todo-demo
          IMAGE_TAG: latest
        run: |
          # Create deployment script
          cat > deploy_script.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Login to ECR
          aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin 216989110067.dkr.ecr.ap-northeast-1.amazonaws.com
          
          # Pull latest image
          docker pull 216989110067.dkr.ecr.ap-northeast-1.amazonaws.com/todo-demo:latest
          
          # Stop and remove existing container
          docker stop todo-app || true
          docker rm todo-app || true
          
          # Run new container
          docker run -d \
            --name todo-app \
            -p 3000:3000 \
            --restart unless-stopped \
            -e DB_HOST='$1' \
            -e DB_USER='$2' \
            -e DB_PASSWORD='$3' \
            -e DB_NAME='$4' \
            216989110067.dkr.ecr.ap-northeast-1.amazonaws.com/todo-demo:latest
          
          # Clean up unused images
          docker image prune -f
          EOF
          
          # Execute deployment via Session Manager
          aws ssm send-command \
            --instance-ids "$EC2_INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[\
              'mkdir -p /tmp/deployment',\
              'cat > /tmp/deployment/deploy.sh << EOF',\
              '$(cat deploy_script.sh)',\
              'EOF',\
              'chmod +x /tmp/deployment/deploy.sh',\
              '/tmp/deployment/deploy.sh \"$DB_HOST\" \"$DB_USER\" \"$DB_PASSWORD\" \"$DB_NAME\"',\
              'rm -rf /tmp/deployment'\
            ]" \
            --region ap-northeast-1 \
            --output text \
            --query 'Command.CommandId' > command_id.txt
          
          # Wait for command completion and check status
          COMMAND_ID=$(cat command_id.txt)
          echo "Waiting for deployment command $COMMAND_ID to complete..."
          
          # Wait up to 10 minutes for completion
          for i in {1..60}; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "$EC2_INSTANCE_ID" \
              --region ap-northeast-1 \
              --query 'Status' \
              --output text 2>/dev/null || echo "InProgress")
            
            echo "Command status: $STATUS"
            
            if [ "$STATUS" = "Success" ]; then
              echo "Deployment completed successfully"
              aws ssm get-command-invocation \
                --command-id "$COMMAND_ID" \
                --instance-id "$EC2_INSTANCE_ID" \
                --region ap-northeast-1 \
                --query 'StandardOutputContent' \
                --output text
              break
            elif [ "$STATUS" = "Failed" ]; then
              echo "Deployment failed"
              aws ssm get-command-invocation \
                --command-id "$COMMAND_ID" \
                --instance-id "$EC2_INSTANCE_ID" \
                --region ap-northeast-1 \
                --query 'StandardErrorContent' \
                --output text
              exit 1
            fi
            
            sleep 10
          done
          
          if [ "$STATUS" != "Success" ]; then
            echo "Deployment timed out"
            exit 1
          fi