name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin 216989110067.dkr.ecr.ap-northeast-1.amazonaws.com

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: 216989110067.dkr.ecr.ap-northeast-1.amazonaws.com
          IMAGE_NAME: todo-demo
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG

      - name: Deploy to EC2 via Session Manager
        env:
          EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          ECR_REGISTRY: 216989110067.dkr.ecr.ap-northeast-1.amazonaws.com
          IMAGE_NAME: todo-demo
          IMAGE_TAG: latest
        run: |
          # Create deployment script
          cat > deploy_commands.json << EOF
          {
            "commands": [
              "#!/bin/bash",
              "set -e",
              "echo 'Starting deployment...'",
              "",
              "# Login to ECR",
              "aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin 216989110067.dkr.ecr.ap-northeast-1.amazonaws.com",
              "",
              "# Pull latest image",
              "echo 'Pulling latest Docker image...'",
              "docker pull 216989110067.dkr.ecr.ap-northeast-1.amazonaws.com/todo-demo:latest",
              "",
              "# Stop and remove existing container",
              "echo 'Stopping existing container...'",
              "docker stop todo-app || true",
              "docker rm todo-app || true",
              "",
              "# Run new container",
              "echo 'Starting new container...'",
              "docker run -d \\",
              "  --name todo-app \\",
              "  -p 3000:3000 \\",
              "  --restart unless-stopped \\",
              "  -e DB_HOST='$DB_HOST' \\",
              "  -e DB_USER='$DB_USER' \\",
              "  -e DB_PASSWORD='$DB_PASSWORD' \\",
              "  -e DB_NAME='$DB_NAME' \\",
              "  216989110067.dkr.ecr.ap-northeast-1.amazonaws.com/todo-demo:latest",
              "",
              "# Clean up unused images",
              "echo 'Cleaning up unused Docker images...'",
              "docker image prune -f",
              "",
              "echo 'Deployment completed successfully!'"
            ]
          }
          EOF
          
          # Execute deployment via Session Manager
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "$EC2_INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --cli-input-json file://deploy_commands.json \
            --region ap-northeast-1 \
            --output text \
            --query 'Command.CommandId')
          
          echo "Deployment command ID: $COMMAND_ID"
          echo "Waiting for deployment to complete..."
          
          # Wait up to 10 minutes for completion
          for i in {1..60}; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "$EC2_INSTANCE_ID" \
              --region ap-northeast-1 \
              --query 'Status' \
              --output text 2>/dev/null || echo "InProgress")
            
            echo "Command status: $STATUS (attempt $i/60)"
            
            if [ "$STATUS" = "Success" ]; then
              echo "✅ Deployment completed successfully!"
              echo "--- Deployment Output ---"
              aws ssm get-command-invocation \
                --command-id "$COMMAND_ID" \
                --instance-id "$EC2_INSTANCE_ID" \
                --region ap-northeast-1 \
                --query 'StandardOutputContent' \
                --output text
              break
            elif [ "$STATUS" = "Failed" ]; then
              echo "❌ Deployment failed!"
              echo "--- Error Output ---"
              aws ssm get-command-invocation \
                --command-id "$COMMAND_ID" \
                --instance-id "$EC2_INSTANCE_ID" \
                --region ap-northeast-1 \
                --query 'StandardErrorContent' \
                --output text
              exit 1
            elif [ "$STATUS" = "Cancelled" ]; then
              echo "❌ Deployment was cancelled!"
              exit 1
            fi
            
            sleep 10
          done
          
          if [ "$STATUS" != "Success" ]; then
            echo "❌ Deployment timed out after 10 minutes"
            exit 1
          fi